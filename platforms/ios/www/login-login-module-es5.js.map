{"version":3,"sources":["webpack:///src/app/login/login.page.html","webpack:///src/app/User.ts","webpack:///src/app/login/login-routing.module.ts","webpack:///src/app/login/login.module.ts","webpack:///src/app/login/login.page.scss","webpack:///src/app/login/login.page.ts","webpack:///src/app/services/auth.service.ts"],"names":["User","email","password","authError","pseudo","id","isActive","username","role","routes","path","component","LoginPageRoutingModule","imports","forChild","exports","LoginPageModule","declarations","LoginPage","router","userService","formBuilder","toastController","authGuardService","loadingController","authService","tokenStorage","user","isAccountExist","isNeedNewPassword","isLoading","form","isLoggedIn","isLoginFailed","errorMessage","roles","isSuccessful","isSignUpFailed","signInValidator","group","required","createAccountValidator","forgetPasswordValidator","getToken","getUser","present","console","log","subscription","register","subscribe","data","err","error","message","presentToast","dismiss","unsubscribe","login","saveToken","accessToken","saveUser","signIn","userToSignIn","value","checkIfIsConnected","userToLog","createAccount","userError","isAuthenticated","navigateByUrl","messageToast","userToGetPassword","getForgetPassword","duration","create","toast","then","a","selector","template","AUTH_API","httpOptions","headers","AuthService","http","credentials","post","providedIn"],"mappings":"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","file":"login-login-module-es5.js","sourcesContent":["export default \"<ion-content>\\n    <div *ngIf=\\\"isAccountExist && !isNeedNewPassword\\\" style=\\\"display: flex; align-items: center; align-content: center; justify-content: center;\\n   flex-direction: column; margin-top: 50%;--ion-background-color: transparent \\\">\\n        <ion-list>\\n            <form [formGroup]=\\\"signInValidator\\\">\\n                <ion-item>\\n                    <ion-label>\\n                        <ion-icon name=\\\"mail-outline\\\"></ion-icon>\\n                    </ion-label>\\n                    <ion-input formControlName=\\\"email\\\" placeholder=\\\"Email\\\" [(ngModel)]=\\\"user.email\\\"\\n                               type=\\\"text\\\"></ion-input>\\n                </ion-item>\\n                <ion-item>\\n                    <ion-label>\\n                        <ion-icon name=\\\"person\\\"></ion-icon>\\n                    </ion-label>\\n                    <ion-input formControlName=\\\"username\\\" placeholder=\\\"User name\\\" [(ngModel)]=\\\"user.username\\\"\\n                               type=\\\"text\\\"></ion-input>\\n                </ion-item>\\n                <ion-item>\\n                    <ion-label>\\n                        <ion-icon name=\\\"key-outline\\\"></ion-icon>\\n                    </ion-label>\\n                    <ion-input formControlName=\\\"password\\\" placeholder=\\\"Password\\\" [(ngModel)]=\\\"user.password\\\"\\n                               type=\\\"password\\\"></ion-input>\\n                </ion-item>\\n                <div style=\\\"display: flex; align-items: center; align-content: center;flex-direction: column\\\">\\n                    <ion-button [disabled]=\\\"!signInValidator.valid\\\" color=\\\"success\\\" shape=\\\"round\\\" (click)=\\\"onSubmitSignIn()\\\">\\n                        Sign in\\n                    </ion-button>\\n                </div>\\n                <div style=\\\"display: flex; align-items: center; align-content: center; flex-direction: column\\\">\\n                    <a (click)=\\\"onForgetPassword()\\\">Forget password?</a>\\n                    <a (click)=\\\"isAccountExist = !isAccountExist\\\">Create Account</a>\\n                </div>\\n            </form>\\n        </ion-list>\\n    </div>\\n    <div *ngIf=\\\"!isAccountExist && !isNeedNewPassword\\\" style=\\\"display: flex; align-items: center; align-content: center; justify-content: center;\\n   flex-direction: column; margin-top: 50%;--ion-background-color: transparent \\\">\\n        <ion-list>\\n            <form [formGroup]=\\\"createAccountValidator\\\">\\n                <ion-item>\\n                    <ion-label>\\n                        <ion-icon name=\\\"mail-outline\\\"></ion-icon>\\n                    </ion-label>\\n                    <ion-input formControlName=\\\"email\\\" placeholder=\\\"Email\\\" [(ngModel)]=\\\"user.email\\\"\\n                               type=\\\"text\\\"></ion-input>\\n                </ion-item>\\n                <ion-item>\\n                    <ion-label>\\n                        <ion-icon name=\\\"person\\\"></ion-icon>\\n                    </ion-label>\\n                    <ion-input formControlName=\\\"username\\\" placeholder=\\\"User name\\\" [(ngModel)]=\\\"user.username\\\"\\n                               type=\\\"text\\\"></ion-input>\\n                </ion-item>\\n                <ion-item>\\n                    <ion-label>\\n                        <ion-icon name=\\\"key-outline\\\"></ion-icon>\\n                    </ion-label>\\n                    <ion-input formControlName=\\\"password\\\" placeholder=\\\"Password\\\" [(ngModel)]=\\\"user.password\\\"\\n                               type=\\\"password\\\"></ion-input>\\n                </ion-item>\\n                <div style=\\\"display: flex; align-items: center; align-content: center; justify-content: center\\\">\\n                    <ion-button [disabled]=\\\"!createAccountValidator.valid\\\" color=\\\"success\\\" shape=\\\"round\\\"\\n                                (click)=\\\"onSubmitCreateAccount()\\\">Create Account\\n                    </ion-button>\\n                    <a (click)=\\\"isAccountExist = !isAccountExist\\\">Sign In</a>\\n                </div>\\n            </form>\\n        </ion-list>\\n    </div>\\n    <div *ngIf=\\\"isNeedNewPassword\\\" style=\\\"display: flex; align-items: center; align-content: center; justify-content: center;\\n   flex-direction: column; margin-top: 50%;--ion-background-color: transparent \\\">\\n        <ion-list>\\n            <form style=\\\"display: flex;flex-direction: column;justify-content: center;align-items: center\\\" [formGroup]=\\\"forgetPasswordValidator\\\">\\n                <ion-item>\\n                    <ion-label>\\n                        <ion-icon name=\\\"mail-outline\\\"></ion-icon>\\n                    </ion-label>\\n                    <ion-input formControlName=\\\"email\\\" placeholder=\\\"Email\\\" [(ngModel)]=\\\"user.email\\\"\\n                               type=\\\"text\\\"></ion-input>\\n                </ion-item>\\n                <ion-item>\\n                    <ion-label>\\n                        <ion-icon name=\\\"person\\\"></ion-icon>\\n                    </ion-label>\\n                    <ion-input formControlName=\\\"userName\\\" placeholder=\\\"User name\\\" [(ngModel)]=\\\"user.username\\\"\\n                               type=\\\"text\\\"></ion-input>\\n                </ion-item>\\n                <form >\\n                    <ion-button [disabled]=\\\"!forgetPasswordValidator.valid\\\" color=\\\"success\\\" shape=\\\"round\\\"\\n                                (click)=\\\"sendPasswordForget()\\\">Send password\\n                    </ion-button>\\n                </form>\\n                    <a (click)=\\\"isNeedNewPassword = !isNeedNewPassword\\\">Sign In</a>\\n            </form>\\n        </ion-list>\\n    </div>\\n</ion-content>\\n\";","export class User {\n    public id: number;\n    public email: string;\n    public password: string;\n    public pseudo: string;\n    public authError: boolean;\n    public familyMembers: [];\n    public role: string;\n    public isActive: boolean;\n    public username: string;\n\n    constructor(email?: string,\n                password?: string,\n                authError?: boolean,\n                pseudo?: string,\n                id?: number,\n                isActive?: boolean,\n                username?: string,\n                role?: string\n                ) {\n        this.email = email;\n        this.username = username;\n        this.password = password;\n        this.pseudo = pseudo;\n        this.id = id;\n        this.authError = authError;\n        this.role = role;\n        this.isActive = isActive\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPageRoutingModule } from './login-routing.module';\n\nimport { LoginPage } from './login.page';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        IonicModule,\n        LoginPageRoutingModule,\n        ReactiveFormsModule,\n\n    ],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xvZ2luL2xvZ2luLnBhZ2Uuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\nimport {Router} from '@angular/router';\nimport {User} from '../User';\nimport {UserService} from '../services/user.service';\nimport {LoadingController, ToastController} from '@ionic/angular';\nimport {FormBuilder, Validators} from '@angular/forms';\nimport {AuthGuardService} from '../services/auth-guard.service';\nimport { AuthService } from '../services/auth.service';\nimport { TokenStorageService } from '../services/token-storage.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage implements OnInit {\n    user: User = new User(\"\", \"\",true);\n    isAccountExist: boolean = true;\n    isNeedNewPassword: boolean = false;\n    signInValidator: any;\n    createAccountValidator: any;\n    forgetPasswordValidator: any;\n    private isLoading: boolean = false;\n\n    form: any = {};\n    isLoggedIn = false;\n    isLoginFailed = false;\n    errorMessage = '';\n    roles: string[] = [];\n\n    isSuccessful = false;\n    isSignUpFailed = false;\n\n    constructor(private router: Router,\n                private userService: UserService,\n                private formBuilder: FormBuilder,\n                private toastController: ToastController,\n                private authGuardService: AuthGuardService,\n                public loadingController: LoadingController,\n                private authService: AuthService, private tokenStorage: TokenStorageService) {\n\n        this.signInValidator = this.formBuilder.group({\n            email: ['', Validators.required],\n            password: ['', Validators.required],\n            username: ['', Validators.required],\n        }),\n            this.createAccountValidator = this.formBuilder.group({\n                email: ['', Validators.required],\n                password: ['', Validators.required],\n                username: ['', Validators.required],\n            }),\n            this.forgetPasswordValidator = this.formBuilder.group({\n                email: ['', Validators.required],\n                username: ['', Validators.required],\n            })\n    }\n\n    ngOnInit() {\n        if (this.tokenStorage.getToken()) {\n            this.isLoggedIn = true;\n            this.roles = this.tokenStorage.getUser().roles;\n        }\n\n    }\n\n    onSubmitCreateAccount() {\n        this.present();\n        console.log(this.user);\n        const subscription = this.authService.register(this.user).subscribe(\n            data => {\n                console.log(data);\n                this.isSuccessful = true;\n                this.isSignUpFailed = false;\n            },\n            err => {\n                this.errorMessage = err.error.message;\n                this.presentToast(err.error.message, 2000)\n                this.isSignUpFailed = true;\n                this.dismiss();\n                subscription.unsubscribe();\n            },\n            () => {\n                this.presentToast('Account created, please check your Mail box', 2000),\n                    this.dismiss();\n                    this.isAccountExist = !this.isAccountExist;\n                    //this.onSubmitSignIn();\n                    subscription.unsubscribe();\n            }\n        );\n    }\n\n    onSubmitSignIn() {\n        this.present();\n        console.log(this.user);\n       const subscription = this.authService.login(this.user).subscribe(\n            data => {\n                this.tokenStorage.saveToken(data.accessToken);\n                this.tokenStorage.saveUser(data);\n                this.isLoginFailed = false;\n                this.isLoggedIn = true;\n                this.roles = this.tokenStorage.getUser().roles;\n                this.signIn();\n            },\n            err => {\n                console.log(err);\n                this.presentToast(err.error.message, 2000);\n                this.errorMessage = err.error.message;\n                this.isLoginFailed = true;\n                this.dismiss();\n                subscription.unsubscribe()\n            },\n           () => {\n                this.dismiss();\n                subscription.unsubscribe();\n           }\n        );\n    }\n\n\n    signIn() {\n        let userToSignIn: User = new User();\n        userToSignIn.email = this.user.email;\n        userToSignIn.password = this.user.password;\n        userToSignIn.authError = this.user.authError;\n        this.present();\n        console.log(userToSignIn);\n        const subscription = this.userService.signIn(userToSignIn).subscribe(\n            value => {\n                this.userService.user = value\n            },\n            error => {\n                this.presentToast(error.error.message,2000),\n                this.dismiss()\n            },\n            () => {\n                this.checkIfIsConnected(this.userService.user.authError),\n                    this.dismiss();\n                    subscription.unsubscribe()\n            });\n    }\n\n    createAccount() {\n        let userToLog: User = new User();\n        userToLog.email = this.user.email;\n        userToLog.password = this.user.password;\n        userToLog.pseudo = this.user.pseudo;\n        const subscription = this.userService.createAccount(userToLog).subscribe(\n            value => {\n                this.userService.user = value,\n                console.log(value)},\n            error => {\n                this.presentToast(error.error.message,2000),\n                this.dismiss();\n            },\n            () => {\n                console.log(this.user.authError),\n                    this.checkIfIsConnected(this.userService.user.authError),\n                    this.presentToast('Account created, please check your Mail box', 2000),\n                    this.dismiss(),\n                    subscription.unsubscribe()\n            });\n    }\n\n    checkIfIsConnected(userError) {\n        if (userError === true) {\n            console.log(userError);\n            this.presentToast(\"connexion impossible probléme de mot de passe\",2000)\n            return console.log(\"connection failed\", \"je passe dans le true\");\n\n        } else {\n            console.log(this.user , \"je passe dans le false\");\n            this.authGuardService.isAuthenticated = true;\n            this.router.navigateByUrl('/home');\n            this.presentToast(\"connected\", 2000)\n            return console.log(\"connected\");\n        }\n    }\n\n    onForgetPassword() {\n        this.isNeedNewPassword = !this.isNeedNewPassword;\n    }\n\n    sendPasswordForget() {\n        let messageToast: string = \"\";\n        console.log('send password');\n        let userToGetPassword = new User();\n        userToGetPassword.email = this.user.email;\n        userToGetPassword.username = this.user.username;\n        userToGetPassword.password = this.user.username;\n        this.present();\n        const subscription = this.userService.getForgetPassword(userToGetPassword).subscribe(\n            value => {\n                messageToast = value\n            },\n            error => {\n                this.presentToast(error.error.message,2000),\n                this.dismiss();\n            },\n            () => {\n                this.presentToast(messageToast, 2000),\n                    this.isNeedNewPassword = false,\n                    this.dismiss();\n                    subscription.unsubscribe()\n            }\n        )\n    }\n\n    async presentToast(message: string, duration?: number) {\n        const toast = await this.toastController.create({\n            message: message,\n            duration: duration\n        });\n        toast.present();\n    }\n\n    async present() {\n        this.isLoading = true;\n        return await this.loadingController.create({\n            // duration: 5000,\n        }).then(a => {\n            a.present().then(() => {\n                console.log('presented');\n                if (!this.isLoading) {\n                    a.dismiss().then(() => console.log('abort presenting'));\n                }\n            });\n        });\n    }\n\n    async dismiss() {\n        this.isLoading = false;\n        return await this.loadingController.dismiss().then(() => console.log('dismissed'));\n    }\n}\n\n\n\n\n\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n// const AUTH_API = 'http://localhost:8082/api/auth/';\nconst AUTH_API = 'https://mask-wash-back-end.herokuapp.com/api/auth/';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private http: HttpClient) { }\n\n  login(credentials): Observable<any> {\n    return this.http.post(AUTH_API + 'signin', {\n      username: credentials.username,\n      password: credentials.password\n    }, httpOptions);\n  }\n\n  register(user): Observable<any> {\n    return this.http.post(AUTH_API + 'signup', {\n      username: user.username,\n      email: user.email,\n      password: user.password\n    }, httpOptions);\n  }\n}\n"]}